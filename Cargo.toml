# Cargo.toml
[package]
name = "md5-wasm"
version = "0.0.1-alpha.5"
edition = "2021"
description = "MD5 WebAssembly implementation"
keywords = ["md5", "md5-wasm"]
license = "MIT"
authors = ["Pursue-LLL <yululiu2018@gmail.com>"]
repository = "git+https://github.com/Pursue-LLL/md5-wasm.git"

# C ABI： 定义了程序在二进制层面进行交互的规则，包括数据类型表示、函数调用约定等。只要不同的编程语言生成的代码都符合 C ABI，它们就可以互相调用，而无需关心彼此使用的具体编程语言或编译器。
# wasm-bindgen生成的胶水代码中用js调用rust按照cabi的规则编译好的二进制.wasm 文件，然后生成js胶水代码
# 动态链接库更适合跨语言调用，所以使用cdylib，Node.js/浏览器只能加载符合 C ABI 的二进制文件，如.node或.wasm
# 其他 crate 类型：
# rlib：Rust 静态库，用于 Rust 内部链接，不暴露 C ABI。
# staticlib：C 静态库，需要链接到其他 C/C++ 项目，但无法被 Node.js 或浏览器直接加载。
[lib]
# 指定 crate 类型为 cdylib，将target如wasm32-unknown-unknown或x86_64-apple-darwin等编译为符合C ABI的二进制文件（动态链接库），然后由wasm-bindgen或napi-rs生成目标平台可用的胶水代码
crate-type = ["cdylib"]

[dependencies]
# wasm-bindgen 是 WebAssembly 绑定工具，用于将 Rust 代码编译为 WebAssembly 并生成 JavaScript 胶水代码。
wasm-bindgen = "0.2"
# serde 是序列化和反序列化框架，可以轻松地将 Rust 数据结构转换为各种格式（如 JSON、YAML、TOML 等）。features = ["derive"] 启用了 serde 的派生宏，可以通过简单的注解自动为你的 Rust 结构体和枚举实现序列化和反序列化功能。
serde = { version = "1.0", features = ["derive"] }
# serde-wasm-bindgen库提供了 serde 和 wasm-bindgen 之间的集成。可以使用 serde 来序列化和反序列化 Rust 数据结构，并将其与 JavaScript 的对象进行相互转换。
serde-wasm-bindgen = "0.6.5"
# js全局对象
js-sys = "0.3"

[profile.release]
# 进行最高级别的优化。编译器会尽可能地优化代码，以生成运行速度最快的二进制文件。这可能会显著增加编译时间，并可能稍微增加二进制文件的大小。通常用于 release 构建
opt-level = 3
# true 表示启用链接时优化。LTO 是一种编译器优化技术，它允许编译器在链接阶段对整个程序进行优化，而不仅仅是单个编译单元（例如单个 .rs 文件）。
# LTO 通常可以生成更小、更快的二进制文件，但会增加编译时间。
lto = true

# 添加 wasm-pack 的配置
[package.metadata.wasm-pack.profile.release]
# 打包优化配置，无需改动，-O4 表示最高级别优化，--enable-bulk-memory 表示启用大内存优化
wasm-opt = ["-O4", "--enable-bulk-memory"]

# 条件编译，MD5不使用web api，无需条件编译即可在nodejs和浏览器中使用
[features]
default = ["node"]
browser = []
node = []

# 配置编译器lint规则
[lints.rust]
# 忽略wasm_bindgen_unstable_test_coverage的警告
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(wasm_bindgen_unstable_test_coverage)'] }

# Clippy 的规则，类似于eslint
[lints.clippy]
enum_glob_use = "deny"        # 禁止使用 enum 的 glob import
type_complexity = "warn"      # 类型过于复杂时警告

[dev-dependencies]
wasm-bindgen-test = "0.3"
